<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-16T14:26:42.223Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>shenyaoguan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拉康研讨班阅读笔记：《The Object Relation》</title>
    <link href="http://example.com/2024/04/16/psychoanalysis/%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%A0%94%E8%AE%A8%E7%8F%AD/"/>
    <id>http://example.com/2024/04/16/psychoanalysis/%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%A0%94%E8%AE%A8%E7%8F%AD/</id>
    <published>2024-04-16T14:23:16.733Z</published>
    <updated>2024-04-16T14:26:42.223Z</updated>
    
    
    
    
    
    <category term="精神分析" scheme="http://example.com/tags/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记：Recover捕获异常</title>
    <link href="http://example.com/2024/04/16/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%20Recover%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2024/04/16/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%20Recover%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/</id>
    <published>2024-04-16T08:44:50.398Z</published>
    <updated>2024-04-17T07:17:20.957Z</updated>
    
    <content type="html"><![CDATA[<h5 id="与Panic的关系"><a href="#与Panic的关系" class="headerlink" title="与Panic的关系"></a>与Panic的关系</h5><p>通常来说，不应当处理Panic异常，但是有时候，我们需要在异常中恢复，或者在崩溃前做一些必要的操作。比如，当web服务器遇到未被预料的问题时，在崩溃前应当将所有连接关闭；如果不做任何处理，会使客户端一直处于等待状态，如果web服务器属于开发状态，我们甚至可以将异常信息反馈到客户端，帮助调试。</p><p>如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中<strong>恢复</strong>，并返回<strong>panic value</strong>。这将导致panic异常的函数不会继续运行，但是能正常返回</p><p>我们以下面这段代码为例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(input <span class="type">string</span>)</span></span> (s *Syntax, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;internal error: %v&quot;</span>, p)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// ...parser...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的recover()帮助Parse从Panic中恢复。我们使用err变量接收错误信息，返回给调用者</p><p><strong>注意：</strong> 不要随意recover别人的panic,也不应该试图恢复其他包引起的panic，否则很可能遗留漏洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;与Panic的关系&quot;&gt;&lt;a href=&quot;#与Panic的关系&quot; class=&quot;headerlink&quot; title=&quot;与Panic的关系&quot;&gt;&lt;/a&gt;与Panic的关系&lt;/h5&gt;&lt;p&gt;通常来说，不应当处理Panic异常，但是有时候，我们需要在异常中恢复，或者在崩溃前做</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
    <category term="编程学习" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>shell的简单学习</title>
    <link href="http://example.com/2024/04/11/os/shell%20%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/04/11/os/shell%20%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-04-11T08:21:35.843Z</published>
    <updated>2024-04-12T07:12:39.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;runoob&quot;</span><br></pre></td></tr></table></figure><p>变量的规则与常见脚本语言相似。</p><p><strong>注意</strong>：‘&#x3D;’两边不要出现空格，否则容易出bug</p><p>其次，可以用语句隐式赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for file in &#x27;ls /etc&#x27;</span><br><span class="line">或</span><br><span class="line">for file in $(ls /etc)</span><br></pre></td></tr></table></figure><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;haha&quot;</span><br><span class="line">echo $your_name</span><br><span class="line">echo $(your_name)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
    <category term="编程学习" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="shell" scheme="http://example.com/tags/shell/"/>
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记：Panic异常</title>
    <link href="http://example.com/2024/04/11/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%20Panic%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2024/04/11/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%20Panic%E5%BC%82%E5%B8%B8/</id>
    <published>2024-04-11T07:41:03.208Z</published>
    <updated>2024-04-16T08:44:43.171Z</updated>
    
    <content type="html"><![CDATA[<h5 id="panic简介"><a href="#panic简介" class="headerlink" title="panic简介"></a>panic简介</h5><p>这里的Panic与前面的错误err不同。这里的Panic常常是在运行中出现的，且常常会导致整个程序崩溃。</p><p>一般而言，panic发生时，程序会中断运行，并立刻执行goroutine中被延迟的函数。</p><p>其中，并不是所有的panic异常都来自运行是，直接调用内置的panic函数也会引发panic异常; panic函数接受任何值作为参数。这里可以作为一个排除一切的选项来阻止不应该出现的场景蔓延。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> s := suit(drawCard()); s &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Spades&quot;</span>:                                <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Hearts&quot;</span>:                                <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Diamonds&quot;</span>:                              <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Clubs&quot;</span>:                                 <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;invalid suit %q&quot;</span>, s)) <span class="comment">// Joker?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是建议调用panic函数时要设置合理的前置条件，否则容易滥用。如下面的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reset</span><span class="params">(x *Buffer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;x is nil&quot;</span>) <span class="comment">// unnecessary!</span></span><br><span class="line">    &#125;</span><br><span class="line">    x.elements = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>regexp.Compile函数的功能是将正则表达式编译成有效的函数，如果正则表达式不合法，那么该函数会返回一个错误。其中检查这个错误是不必要且累赘的，</p><p>这是如果我们希望调用Compile函数时检查输入的合法性，就需要使用regexp.MustCompile函数。下面是该函数的实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regexp</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compile</span><span class="params">(expr <span class="type">string</span>)</span></span> (*Regexp, <span class="type">error</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MustCompile</span><span class="params">(expr <span class="type">string</span>)</span></span> *Regexp &#123;</span><br><span class="line">    re, err := Compile(expr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，MustCompile函数不能接受不合法的输入，其中函数名的Must前缀是一种对这类函数的约定，比如template.Must函数。</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p>让我们看下面一串代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;f(%d)\n&quot;</span>, x+<span class="number">0</span>/x) <span class="comment">// panics if x == 0</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;defer %d\n&quot;</span>, x)</span><br><span class="line">    f(x - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f(3)</span><br><span class="line">f(2)</span><br><span class="line">f(1)</span><br><span class="line">defer 1</span><br><span class="line">defer 2</span><br><span class="line">defer 3</span><br></pre></td></tr></table></figure><p>当f(0)被调用时，发生了panic异常，之前被defer的fmt.Printf被调用，程序中断执行后，panic信息和堆栈信息被输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">goroutine 1 [running]:</span><br><span class="line">main.f(0x4be858?)</span><br><span class="line">        /home/shenyaoguan/Code/gin_study/ch5/test.go:10 +0x118</span><br><span class="line">main.f(0x1)</span><br><span class="line">        /home/shenyaoguan/Code/gin_study/ch5/test.go:12 +0xfe</span><br><span class="line">main.f(0x2)</span><br><span class="line">        /home/shenyaoguan/Code/gin_study/ch5/test.go:12 +0xfe</span><br><span class="line">main.f(0x3)</span><br><span class="line">        /home/shenyaoguan/Code/gin_study/ch5/test.go:12 +0xfe</span><br><span class="line">main.main()</span><br><span class="line">        /home/shenyaoguan/Code/gin_study/ch5/test.go:6 +0x18</span><br></pre></td></tr></table></figure><p>我们在下一节将看到，如何是程序从panic中恢复，阻止程序崩溃</p><h5 id="panic信息返回"><a href="#panic信息返回" class="headerlink" title="panic信息返回"></a>panic信息返回</h5><p>为了方便诊断问题，runtime包允许程序员输出堆栈信息，在下面例子中，我们可以通过runtime函数来调用printStack输出信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> printStack()</span><br><span class="line">    f(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printStack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf [<span class="number">4096</span>]<span class="type">byte</span></span><br><span class="line">    n := runtime.Stack(buf[:], <span class="literal">false</span>)</span><br><span class="line">    os.Stdout.Write(buf[:n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候要注意，在调试模式下可以看到，printStack先运行，再运行报错</p><p>若将panic机制类比为其他语言异常机制，则会出现疑问，runtime.Stack为何能输出已经被释放函数的星系？事实上，Go的panic机制中，延迟函数的调用是在释放堆栈信息前的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;panic简介&quot;&gt;&lt;a href=&quot;#panic简介&quot; class=&quot;headerlink&quot; title=&quot;panic简介&quot;&gt;&lt;/a&gt;panic简介&lt;/h5&gt;&lt;p&gt;这里的Panic与前面的错误err不同。这里的Panic常常是在运行中出现的，且常常会导致整个程序崩</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
    <category term="编程学习" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记：Deferred函数</title>
    <link href="http://example.com/2024/04/09/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ADeferred%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2024/04/09/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ADeferred%E5%87%BD%E6%95%B0/</id>
    <published>2024-04-09T07:53:51.143Z</published>
    <updated>2024-04-09T08:32:11.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deferred函数"><a href="#Deferred函数" class="headerlink" title="Deferred函数"></a>Deferred函数</h3><p>在以前的findLinks的例子中，http.Get的输出是作为html.Parse的输入。只有当url的内容是html格式时html.Parse才能正常工作，但是实际中，url指向的内容非常丰富，比如图片，纯文本或者其他。如果他们传入html.Parse,显然会产生不良后果。</p><p>比如下面的例子就会在非html时终止运行，返回错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">title</span><span class="params">(url <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    resp, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Check Content-Type is HTML (e.g., &quot;text/html;charset=utf-8&quot;).</span></span><br><span class="line">    ct := resp.Header.Get(<span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ct != <span class="string">&quot;text/html&quot;</span> &amp;&amp; !strings.HasPrefix(ct,<span class="string">&quot;text/html;&quot;</span>) &#123;</span><br><span class="line">        resp.Body.Close()</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s has type %s, not text/html&quot;</span>,url, ct)</span><br><span class="line">    &#125;</span><br><span class="line">    doc, err := html.Parse(resp.Body)</span><br><span class="line">    resp.Body.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;parsing %s as HTML: %v&quot;</span>, url,err)</span><br><span class="line">    &#125;</span><br><span class="line">    visitNode := <span class="function"><span class="keyword">func</span><span class="params">(n *html.Node)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="string">&quot;title&quot;</span>&amp;&amp;n.FirstChild != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(n.FirstChild.Data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    forEachNode(doc, visitNode, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中resp.Body.close调用了多次，为且表title在所有执行路径下都关闭了网络联机(即使函数运行失败)，可以使用defer机制让事情变得简单</p><p>只需要在普通函数或者方法的前面加上关键字defer即可，其中要注意，在多条defer语句中，它们执行的顺序与声明顺序<strong>相反</strong></p><p>defer通常用来处理成对的操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">title</span><span class="params">(url <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    resp, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    ct := resp.Header.Get(<span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ct != <span class="string">&quot;text/html&quot;</span> &amp;&amp; !strings.HasPrefix(ct,<span class="string">&quot;text/html;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s has type %s, not text/html&quot;</span>,url, ct)</span><br><span class="line">    &#125;</span><br><span class="line">    doc, err := html.Parse(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;parsing %s as HTML: %v&quot;</span>, url,err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...print doc&#x27;s title element…</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些可以采用defer机制，比如对文件的操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ioutil</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(filename <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    f, err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    <span class="keyword">return</span> ReadAll(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者处理互斥锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="keyword">return</span> m[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="记录被调用情况"><a href="#记录被调用情况" class="headerlink" title="记录被调用情况"></a>记录被调用情况</h5><p>当调试复杂程序时，defer机制常被用于记录何时进入和退出函数，如下例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bigSlowOperation</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> trace(<span class="string">&quot;bigSlowOperation&quot;</span>)() <span class="comment">// don&#x27;t forget the extra parentheses</span></span><br><span class="line">    <span class="comment">// ...lots of work…</span></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second) <span class="comment">// simulate slow operation by sleeping</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(msg <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    log.Printf(<span class="string">&quot;enter %s&quot;</span>, msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; </span><br><span class="line">        log.Printf(<span class="string">&quot;exit %s (%s)&quot;</span>, msg,time.Since(start)) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次bigSlowOperration被调用，程序都会记录函数进入，退出和持续时间。</p><p>注意：<br>这里利用了defer的<strong>即时求值</strong>的性质</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Deferred函数&quot;&gt;&lt;a href=&quot;#Deferred函数&quot; class=&quot;headerlink&quot; title=&quot;Deferred函数&quot;&gt;&lt;/a&gt;Deferred函数&lt;/h3&gt;&lt;p&gt;在以前的findLinks的例子中，http.Get的输出是作为html.P</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
    <category term="编程学习" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记：可变参数</title>
    <link href="http://example.com/2024/04/09/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/2024/04/09/It&#39;s%20mygo/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</id>
    <published>2024-04-09T07:25:13.802Z</published>
    <updated>2024-04-09T07:54:58.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可变参数的函数"><a href="#可变参数的函数" class="headerlink" title="可变参数的函数"></a>可变参数的函数</h3><p>这一节主要是研究参数数量可变的函数，比如fmt.Printf</p><p>在声明可变参数函数时，需要在最后一个参数类型前加上省略号，以表示该函数可以接受任意数量的该类型参数.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(vals ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</span><br><span class="line">        total += val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sum函数就可以返回任意歌int型参数的和</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(sum())           <span class="comment">// &quot;0&quot;</span></span><br><span class="line">fmt.Println(sum(<span class="number">3</span>))          <span class="comment">// &quot;3&quot;</span></span><br><span class="line">fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// &quot;10&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上边的代码中，调用者隐式的创建一个数组，再把数组的一个切片，作为参数传给被调用函数。 如果函数已经是切片类型的，我们应该在最后一个参数后加上省略符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">values := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(sum(values...)) <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><p>其中要注意，虽然…int型参数的行为像切片类型，但是其实不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(...<span class="type">int</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">([]<span class="type">int</span>)</span></span> &#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, f) <span class="comment">// &quot;func(...int)&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, g) <span class="comment">// &quot;func([]int)&quot;</span></span><br></pre></td></tr></table></figure><p>其中，可变阐述经常用于格式化字符串，比如下面的errorf函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorf</span><span class="params">(linenum <span class="type">int</span>, format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(os.Stderr, <span class="string">&quot;Line %d: &quot;</span>, linenum)</span><br><span class="line">    fmt.Fprintf(os.Stderr, format, args...)</span><br><span class="line">    fmt.Fprintln(os.Stderr)</span><br><span class="line">&#125;</span><br><span class="line">linenum, name := <span class="number">12</span>, <span class="string">&quot;count&quot;</span></span><br><span class="line">errorf(linenum, <span class="string">&quot;undefined: %s&quot;</span>, name) <span class="comment">// &quot;Line 12: undefined: count&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可变参数的函数&quot;&gt;&lt;a href=&quot;#可变参数的函数&quot; class=&quot;headerlink&quot; title=&quot;可变参数的函数&quot;&gt;&lt;/a&gt;可变参数的函数&lt;/h3&gt;&lt;p&gt;这一节主要是研究参数数量可变的函数，比如fmt.Printf&lt;/p&gt;
&lt;p&gt;在声明可变参数函数时，需</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2024/04/08/test/"/>
    <id>http://example.com/2024/04/08/test/</id>
    <published>2024-04-08T11:22:15.062Z</published>
    <updated>2024-04-08T11:33:48.289Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test article.</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a test article.&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;h2 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/04/08/hello-world/"/>
    <id>http://example.com/2024/04/08/hello-world/</id>
    <published>2024-04-08T10:11:49.884Z</published>
    <updated>2024-04-08T10:11:49.884Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
